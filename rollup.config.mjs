import assert from 'node:assert';
import { fileURLToPath } from 'node:url';
import { relative } from 'node:path';
import { rmSync } from 'node:fs';

import fg from 'fast-glob';

const inputFiles = fg.globSync([
	'lib/**/*.mjs',
	'!**/__tests__/**',
	'!lib/testUtils/**',

	// NOTE: We cannot support CJS for `cli.mjs` since the `meow` dependency is pure ESM.
	'!lib/cli.mjs',
]);

// clean up
for (const input of inputFiles) {
	rmSync(input.replace('.mjs', '.cjs'), { force: true });
}

const rootDir = fileURLToPath(new URL('.', import.meta.url));

/** @type {import('rollup').RollupOptions[]} */
export default inputFiles.map((input) => {
	return {
		input,
		output: {
			format: 'cjs',
			dir: rootDir,
			entryFileNames: ({ facadeModuleId }) => {
				assert.ok(facadeModuleId);

				return relative(rootDir, facadeModuleId).replace('.mjs', '.cjs');
			},
			generatedCode: {
				preset: 'es2015',
				symbols: false,
			},
			interop: 'default',
			esModule: false,
			preserveModules: true,
			validate: true,
			banner:
				'// NOTICE: This file is generated by Rollup. To modify it,\n// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).',
		},
		treeshake: false,
		plugins: [addWarningForCJS()],
	};
});

/**
 * @see https://rollupjs.org/plugin-development/
 *
 * @returns {import('rollup').Plugin}
 */
function addWarningForCJS() {
	return {
		name: 'stylelint-add-warning-for-cjs',
		resolveId(source) {
			if (source === 'lib/index.mjs') {
				return source;
			}

			return null;
		},
		transform(code, id) {
			if (id === 'lib/index.mjs') {
				return `${code}
if (!process.env.STYLELINT_CJS_IGNORE_WARNING) {
	console.warn("The CJS build of Stylelint's Node.js API is deprecated. See https://stylelint.io/migration-guide/to-16");
}
`;
			}

			return null;
		},
	};
}
