import rule from '../index.mjs';
const { messages, ruleName } = rule;

testRule({
	ruleName,
	config: [true],

	accept: [
		{
			code: '@media screen and (min-width: 768px) {}',
			description: 'Basic media feature',
		},
		{
			code: '@media screen and (min-width: 0) {}',
			description: 'Length of zero, without a unit',
		},
		{
			code: '@media screen and ( min-resolution :  2dpcm ) {}',
			description: 'A resolution',
		},
		{
			code: '@media screen and ( -moz-min-resolution :  2dpcm ) {}',
			description: 'A resolution with a vendor prefix',
		},
		{
			code: '@media screen and (resolution: 10.1dpcm) {}',
			description: 'A resolution with a floating point value',
		},
		{
			code: '@media screen and (min-width: $sm) {}',
			description: 'Non-standard syntax is not checked by this rule',
		},
		{
			code: '@media (color) {}',
			description: 'Boolean context',
		},
		{
			code: '@media (color : 1) {}',
			description: 'Integer value',
		},
		{
			code: '@media (aspect-ratio : 1 / 1) {}',
			description: 'Aspect ratio value',
		},
		{
			code: '@media (aspect-ratio : 1.2) {}',
			description: 'Float value for aspect ratio',
		},
		{
			code: '@media (aspect-ratio : 1 / calc(Pi)) {}',
			description: 'Math expression in aspect ratio',
		},
		{
			code: '@media (width: max(sin(90deg) * 10px, 100px)) {}',
			description: 'Math expression in length',
		},
		{
			code: '@media screen and (min-width <= 768px) {}',
			description: 'Range context, media feature in allowed list',
		},
		{
			code: '@media (hover: #foo) {}',
			description: 'General enclosed because hash tokens are invalid syntax',
		},
		{
			code: '@media (hover: 10%) {}',
			description: 'General enclosed because percentage tokens are invalid syntax',
		},
		{
			code: '@media screen and (min-width: env(some-width-variable)) and (hover: env(some-width-variable)) and (aspect-ratio < env(some-number-variable) / 100) {}',
			description: 'Environment variables',
		},
		{
			code: '@media (-webkit-hover: -webkit-hover) {}',
			description: 'Double vendor prefixes when valid',
		},
		{
			code: '@media (foo: 100px) {}',
			description: 'Unknown media feature',
		},

		// https://www.codeinwp.com/blog/how-to-use-css-media-queries/#less-common-media-features
		{ code: '@media (width: 800px) {}' },
		{ code: '@media (min-width: 360px) {}' },
		{ code: '@media (max-width: 1400px) {}' },
		{ code: '@media (height: 500px) {}' },
		{ code: '@media (min-height: 400px) {}' },
		{ code: '@media (max-height: 400px) {}' },
		{ code: '@media (orientation: portrait) {}' },
		{ code: '@media (orientation: landscape) {}' },
		{ code: '@media (display-mode: fullscreen) {}' },
		{ code: '@media (display-mode: standalone) {}' },
		{ code: '@media (display-mode: minimal-ui) {}' },
		{ code: '@media (display-mode: browser) {}' },
		{ code: '@media (aspect-ratio: 16/9) {}' },
		{ code: '@media (color) {}' },
		{ code: '@media (color: 8) {}' },
		{ code: '@media (min-color: 8) {}' },
		{ code: '@media (max-color: 16) {}' },
		{ code: '@media (grid: 0) {}' },
		{ code: '@media (grid: 1) {}' },
		{ code: '@media (monochrome: 0) {}' },
		{ code: '@media (monochrome) {}' },
		{ code: '@media (resolution: 72dpi) {}' },
		{ code: '@media (min-resolution: 300dpi) {}' },
		{ code: '@media (max-resolution: 150dpi) {}' },
		{ code: '@media (any-hover: none) {}' },
		{ code: '@media (any-hover: hover) {}' },
		{ code: '@media (any-pointer: none) {}' },
		{ code: '@media (any-pointer: coarse) {}' },
		{ code: '@media (any-pointer: fine) {}' },
		{ code: '@media (color-gamut: srgb) {}' },
		{ code: '@media (color-gamut: p3) {}' },
		{ code: '@media (color-gamut: rec2020) {}' },
		{ code: '@media (min-color-index: 15000) {}' },
		{ code: '@media (max-color-index: 30000) {}' },
		{ code: '@media (hover: none) {}' },
		{ code: '@media (hover: hover) {}' },
		{ code: '@media (overflow-block: none) {}' },
		{ code: '@media (overflow-block: scroll) {}' },
		{ code: '@media (overflow-block: paged) {}' },
		{ code: '@media (overflow-inline: none) {}' },
		{ code: '@media (overflow-inline: scroll) {}' },
		{ code: '@media (pointer: none) {}' },
		{ code: '@media (pointer: coarse) {}' },
		{ code: '@media (pointer: fine) {}' },
		{ code: '@media (scan: interlace) {}' },
		{ code: '@media (scan: progressive) {}' },
		{ code: '@media (update: none) {}' },
		{ code: '@media (update: slow) {}' },
		{ code: '@media (update: fast) {}' },
		{ code: '@media (dynamic-range: standard) {}' },
		{ code: '@media (dynamic-range: high) {}' },
		{ code: '@media (forced-color: none) {}' },
		{ code: '@media (forced-color: active) {}' },
		{ code: '@media (horizontal-viewport-segments: 3) {}' },
		{ code: '@media (environment-blending: opaque) {}' },
		{ code: '@media (environment-blending: additive) {}' },
		{ code: '@media (environment-blending: subtractive) {}' },
		{ code: '@media (inverted-colors: none) {}' },
		{ code: '@media (inverted-colors: inverted) {}' },
		{ code: '@media (nav-controls: none) {}' },
		{ code: '@media (nav-controls: back) {}' },
		{ code: '@media (prefers-contrast: no-preference) {}' },
		{ code: '@media (prefers-contrast: more) {}' },
		{ code: '@media (prefers-contrast: less) {}' },
		{ code: '@media (prefers-color-scheme: light) {}' },
		{ code: '@media (prefers-color-scheme: dark) {}' },
		{ code: '@media (prefers-reduced-data: no-preference) {}' },
		{ code: '@media (prefers-reduced-data: reduce) {}' },
		{ code: '@media (prefers-reduced-motion: no-preference) {}' },
		{ code: '@media (prefers-reduced-motion: reduce) {}' },
		{ code: '@media (prefers-reduced-transparency: no-preference) {}' },
		{ code: '@media (prefers-reduced-transparency: reduce) {}' },
		{ code: '@media (scripting: none) {}' },
		{ code: '@media (scripting: initial-only) {}' },
		{ code: '@media (scripting: enabled) {}' },
		{ code: '@media (vertical-viewport-segments: 3) {}' },
		{ code: '@media (video-color-gamut: srgb) {}' },
		{ code: '@media (video-color-gamut: p3) {}' },
		{ code: '@media (video-color-gamut: rec2020) {}' },
		{ code: '@media (video-dynamic-range: standard) {}' },
		{ code: '@media (video-dynamic-range: high) {}' },
	],

	reject: [
		{
			code: '@media screen and (min-width: 1000khz) {}',
			description: 'Frequency value when only lengths are allowed',
			message: messages.rejected('min-width', '1000khz'),
			line: 1,
			column: 31,
			endLine: 1,
			endColumn: 38,
		},
		{
			code: '@media screen and (width <= 1000khz) {}',
			description: 'Frequency value when only lengths are allowed in a range context',
			message: messages.rejected('width', '1000khz'),
			line: 1,
			column: 29,
			endLine: 1,
			endColumn: 36,
		},
		{
			code: '@media screen and (-webkit-width = 1000khz) {}',
			description: 'Validates vendor-prefixed media features',
			message: messages.rejected('-webkit-width', '1000khz'),
			line: 1,
			column: 36,
			endLine: 1,
			endColumn: 43,
		},
		{
			code: '@media (-webkit-hover: -webkit-pointer) {}',
			description: 'Double vendor prefixes when invalid',
			message: messages.rejected('-webkit-hover', '-webkit-pointer'),
			line: 1,
			column: 24,
			endLine: 1,
			endColumn: 39,
		},
		{
			code: '@media (color: 1.1) {}',
			description: 'Float value when only integers are allowed',
			message: messages.rejected('color', '1.1'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 19,
		},
		{
			code: '@media (color: 1 / 1) {}',
			description: 'Aspect ratio value when only integers are allowed',
			message: messages.rejected('color', '1 / 1'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 21,
		},
		{
			code: '@media (hover: 15) {}',
			description: 'Integer when only keywords are allowed',
			message: messages.rejected('hover', '15'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 18,
		},
		{
			code: '@media (hover: /* a comment */15) {}',
			description: 'Correct offsets when comments are present',
			message: messages.rejected('hover', '15'),
			line: 1,
			column: 31,
			endLine: 1,
			endColumn: 33,
		},
		{
			code: '@media (width: 15) {}',
			description: 'Integer when only lengths are allowed',
			message: messages.rejected('width', '15'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 18,
		},
		{
			code: '@media (hover: 10px) {}',
			description: 'Dimension when only keywords are allowed',
			message: messages.rejected('hover', '10px'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 20,
		},
		{
			code: '@media (hover: sin(90deg)) {}',
			description: 'Math expressions when only keywords are allowed',
			message: messages.rejected('hover', 'sin(90deg)'),
			line: 1,
			column: 16,
			endLine: 1,
			endColumn: 26,
		},
		{
			code: '@media (grid: 2) or (grid: -1) {}',
			description: 'Grid only allows "0" or "1"',
			warnings: [
				{
					message: messages.rejected('grid', '2'),
					line: 1,
					column: 15,
					endLine: 1,
					endColumn: 16,
				},
				{
					message: messages.rejected('grid', '-1'),
					line: 1,
					column: 28,
					endLine: 1,
					endColumn: 30,
				},
			],
		},
		{
			code: '@media (color: purple) and (hover: pointer) {}',
			description: 'Incorrect keywords',
			warnings: [
				{
					message: messages.rejected('color', 'purple'),
					line: 1,
					column: 16,
					endLine: 1,
					endColumn: 22,
				},
				{
					message: messages.rejected('hover', 'pointer'),
					line: 1,
					column: 36,
					endLine: 1,
					endColumn: 43,
				},
			],
		},
	],
});
