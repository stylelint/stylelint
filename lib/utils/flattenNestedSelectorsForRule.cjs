// NOTICE: This file is generated by Rollup. To modify it,
// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).
'use strict';

const resolvedNestedSelector = require('postcss-resolve-nested-selector');
const getRuleSelector = require('./getRuleSelector.cjs');
const getSelectorAST = require('./getSelectorAST.cjs');
const isStandardSyntaxSelector = require('./isStandardSyntaxSelector.cjs');

/**
 * @typedef {import('postcss-selector-parser').Selector} Selector
 * @typedef {import('postcss-selector-parser').Root} SelectorRoot
 * @typedef {Array<{selector: Selector, resolvedSelectors: Array<Selector>}> | undefined} FlattenedSelectors
 * @param {import('postcss').Rule} rule
 * @param {import('stylelint').PostcssResult} result
 * @returns {Array<{selector: Selector, resolvedSelectors: Array<Selector>}> | undefined}
 */
function flattenNestedSelectorsForRule(rule, result) {
	/** @type {FlattenedSelectors} */
	const flattenedSelectors = [];

	const ownAST = getSelectorAST(getRuleSelector(rule), result, rule);

	if (!ownAST) return;

	for (const selectorAST of ownAST.nodes) {
		const resolvedSelectors = resolvedNestedSelector(selectorAST.toString(), rule);

		for (const resolvedSelector of resolvedSelectors) {
			if (!isStandardSyntaxSelector(resolvedSelector)) return;

			const resolvedRoot = getSelectorAST(resolvedSelector, result, rule);

			if (!resolvedRoot) {
				continue;
			}

			flattenedSelectors.push({
				selector: selectorAST.clone(),
				resolvedSelectors: resolvedRoot.nodes,
			});
		}
	}

	return flattenedSelectors;
}

module.exports = flattenNestedSelectorsForRule;
