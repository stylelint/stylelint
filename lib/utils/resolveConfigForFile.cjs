// NOTICE: This file is generated by Rollup. To modify it,
// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).
'use strict';

const fastGlob = require('fast-glob');
const micromatch = require('micromatch');

/** @import {Config} from 'stylelint' */

/**
 * Normalizes rule configurations to ensure all rule values are arrays.
 * This is a common requirement for linting tools where a rule can be
 * specified with or without options.
 * @param {Object<string, Config>} rules - An object of rule configurations.
 * @returns {Object<string, Array<Config>>} The normalized rules object.
 */
function normalizeRuleValues(rules = {}) {
	/** @type {Object<string, Array<Config>>} */
	const normalizedRules = {};

	for (const ruleName in rules) {
		if (Object.hasOwn(rules, ruleName) && rules[ruleName]) {
			const value = rules[ruleName];

			normalizedRules[ruleName] = Array.isArray(value) ? value : [value];
		}
	}

	return normalizedRules;
}

/**
 * Calculates the final configuration for a specific file by merging a base
 * configuration with all applicable overrides.
 *
 * Overrides are applied if their key is an exact match for the file path or a
 * glob pattern that matches the file path.
 *
 * @param {string} filePath - The absolute path to the file to resolve config for.
 * @param {Config} baseConfig - The base configuration object.
 * @param {Object<string, Config>} fileConfigMap - An object where keys are file
 * paths or glob patterns, and values are config objects to layer on top.
 * @returns {{rules: Config, other: Config}|undefined} An object with the
 * final merged rules and all other configuration properties.
 */
function resolveConfigForFile(filePath, baseConfig, fileConfigMap) {
	const { rules: baseRules = {}, ...otherBaseConfig } = baseConfig;

	let applicableRules = {};
	let applicableConfig = {};

	for (const path in fileConfigMap) {
		if (Object.hasOwn(fileConfigMap, path)) {
			const isExactMatch = path === filePath;
			const isGlobMatch =
				fastGlob.isDynamicPattern(path) &&
				micromatch.isMatch(filePath, `**/${path}`, { dot: true });

			if ((isExactMatch || isGlobMatch) && fileConfigMap[path]) {
				if (Object.prototype.hasOwnProperty.call(fileConfigMap, path)) {
					const { rules, ...config } = fileConfigMap[path];

					if (config.extends) {
						return;
					}

					applicableRules = {
						...applicableRules,
						...normalizeRuleValues(rules),
					};
					applicableConfig = { ...applicableConfig, ...config };
				}
			}
		}
	}

	return {
		rules: { ...baseRules, ...applicableRules },
		other: { ...otherBaseConfig, ...applicableConfig },
	};
}

module.exports = resolveConfigForFile;
